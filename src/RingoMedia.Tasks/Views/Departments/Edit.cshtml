@model RingoMedia.Tasks.Application.Models.UpdateDepartmentModel

@{
    ViewData["Title"] = $"Edit Department | {Model.Name}";
}

<h1>Edit <strong>@Model.Name</strong> Department</h1>

<div>
    <form asp-action="Edit">
        <input type="hidden" asp-for="Id" />

        <div class="form-group">
            <label asp-for="Name" class="control-label"></label>
            <input asp-for="Name" class="form-control" />
            <span asp-validation-for="Name" class="text-danger"></span>
        </div>

        <div class="form-group">
            <label asp-for="LogoUrl" class="control-label"></label>
            <input asp-for="LogoUrl" class="form-control" />
            <span asp-validation-for="LogoUrl" class="text-danger"></span>
        </div>

        <div class="form-group" id="departmentContainerDev">
            <label asp-for="ParentDepartmentId" class="control-label">Parent Department</label>
            <input type="hidden" asp-for="ParentDepartmentId" id="ParentDepartmentId" />
            <div id="departmentDropdowns"></div>
        </div>

        <div class="form-group">
            <br />
            <input type="submit" value="Save" class="btn btn-primary" />
            <a asp-action="Index" class="btn btn-danger">Cancel</a>
        </div>
    </form>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script>
        const parents = @Html.Raw(Json.Serialize(ViewBag.ParentDepartments));
        var parentDepartmentId = @Model.ParentDepartmentId;

        document.addEventListener("DOMContentLoaded", function () {
            loadSubDepartments(null, 0);

            document.getElementById('departmentDropdowns').addEventListener('change', function (event) {
                if (event.target.classList.contains('department-select')) {
                    var selectedValue = event.target.value;
                    var level = parseInt(event.target.dataset.level);
                    AddDropdown(selectedValue, level);
                }
            });
        });

        function AddDropdown(selectedValue, level) {
            console.log('selected value is:', selectedValue);
            console.log('level value is:', level);
            // Remove all dropdowns after the current level
            var dropdowns = document.querySelectorAll('.department-select');
            dropdowns.forEach(function (dropdown) {
                if (parseInt(dropdown.dataset.level) > level) {
                    dropdown.parentElement.removeChild(dropdown);
                }
            });

            dropdowns = document.querySelectorAll('.department-select');
            if (selectedValue) {
                loadSubDepartments(selectedValue, level + 1);
                document.getElementById('ParentDepartmentId').value = selectedValue;
            } else {
                document.getElementById('ParentDepartmentId').value = dropdowns.length > 1 ? dropdowns[dropdowns.length - 2].value : "";
            }
            console.log('ParentDepartmentId value is:', document.getElementById('ParentDepartmentId').value);
        }

        function loadSubDepartments(parentId, level) {
            fetch('/Departments/GetSubDepartments?id=' + (parentId || ''))
                .then(response => response.json())
                .then(data => {
                    if (data.length > 0) {
                        var select = document.createElement('select');
                        select.classList.add('form-control', 'department-select', 'department-custome-style');
                        select.dataset.level = level;
                        var option = document.createElement('option');
                        option.value = '';
                        option.text = 'Select Parent Department';
                        select.appendChild(option);

                        data.forEach(department => {
                            if (department.id != @Model.Id) {
                                var option = document.createElement('option');
                                option.value = department.id;
                                option.text = department.name;
                                select.appendChild(option);
                            }
                        });

                        if ($(select).find('option').length > 1) {
                            document.getElementById('departmentDropdowns').appendChild(select);
                            selectFirstMatchingOption(select, level);
                        } else if (level == 0) {
                            $('#departmentContainerDev').remove();
                        }

                    } else if (level == 0) {
                        $('#departmentContainerDev').remove();
                    }

                });
        }

        function selectFirstMatchingOption(select, level) {
            let selectedValue = null;

            $(select).find('option').each(function () {
                const optionValue = parseInt($(this).val());
                if (parents.some(parent => parent.id === optionValue)) {
                    $(this).prop('selected', true);
                    selectedValue = optionValue;
                    return false; // break the loop
                }
            });

            if (selectedValue == null) {
                $(select).val('');
            } else {
                AddDropdown(selectedValue, level);
            }
        }
    </script>
}